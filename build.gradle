/*
 * Copyright 2019 Vladimir Raupov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import io.gitlab.arturbosch.detekt.Detekt
import org.jetbrains.dokka.gradle.DokkaTask

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        google()
    }

    dependencies {
        classpath(libs.bundles.plugins)
    }
}


plugins {
    alias(libs.plugins.spotless)
    alias(libs.plugins.gver)
    alias(libs.plugins.detekt)
    alias(libs.plugins.dokka)
}


allprojects {
    repositories {
        mavenCentral()
        google()
    }
}


subprojects {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_11

            // Treat all Kotlin warnings as errors
            allWarningsAsErrors = true

            // Enable experimental coroutines APIs
            freeCompilerArgs += "-opt-in=kotlinx.coroutines.ObsoleteCoroutinesApi"
            freeCompilerArgs += "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        }
    }

    apply plugin: 'com.diffplug.spotless'
    spotless {
        kotlin {
            target "**/*.kt"
            targetExclude("$buildDir/**/*.kt")
            targetExclude('bin/**/*.kt')

            ktlint(libs.versions.ktlint.get())
            licenseHeaderFile rootProject.file('spotless/copyright.kt')
        }
    }

    apply plugin: 'org.jetbrains.dokka'
    tasks.withType(DokkaTask).configureEach {
        dokkaSourceSets {
            named("main") {
                jdkVersion.set(JavaVersion.VERSION_11.majorVersion.toInteger())
                skipDeprecated.set(false)
                reportUndocumented.set(false)
                skipEmptyPackages.set(true)

                sourceLink {
                    def relPath = rootProject.projectDir.toPath().relativize(projectDir.toPath())
                    localDirectory.set(new File("src/main/kotlin"))
                    remoteUrl.set(new URL("https://github.com/LDRAlighieri/Corbind/tree/master/$relPath/src/main/kotlin"))
                    remoteLineSuffix.set("#L")
                }

                externalDocumentationLink {
                    url.set(new URL("https://developer.android.com/reference/"))
                    packageListUrl.set(new URL("https://developer.android.com/reference/package-list"))
                }

                externalDocumentationLink {
                    url.set(new URL("https://developer.android.com/reference/"))
                    packageListUrl.set(new URL("https://developer.android.com/reference/androidx/package-list"))
                }

                externalDocumentationLink {
                    url.set(new URL("https://developer.android.com/reference/"))
                    packageListUrl.set(new URL("https://developer.android.com/reference/com/google/android/material/package-list"))
                }
            }
        }
    }
}


detekt {
    allRules = false
    buildUponDefaultConfig = true

    config = files("default-detekt-config.yml")
    source = files(
            "corbind/src/main/kotlin",
            "corbind-activity/src/main/kotlin",
            "corbind-appcompat/src/main/kotlin",
            "corbind-core/src/main/kotlin",
            "corbind-drawerlayout/src/main/kotlin",
            "corbind-leanback/src/main/kotlin",
            "corbind-lifecycle/src/main/kotlin",
            "corbind-material/src/main/kotlin",
            "corbind-navigation/src/main/kotlin",
            "corbind-recyclerview/src/main/kotlin",
            "corbind-slidingpanelayout/src/main/kotlin",
            "corbind-swiperefreshlayout/src/main/kotlin",
            "corbind-viewpager/src/main/kotlin",
            "corbind-viewpager2/src/main/kotlin"
    )
    parallel = true
}

tasks.withType(Detekt).configureEach {
    jvmTarget = JavaVersion.VERSION_11
    reports {
        html.required.set(true)
        xml.required.set(false)
        txt.required.set(false)
        sarif.required.set(false)
    }
}


configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            // Force all Kotlin stdlib artifacts to use the same version.
            if (details.requested.group == 'org.jetbrains.kotlin'
                    && details.requested.name.startsWith('kotlin-stdlib')) {
                details.useVersion libs.versions.kotlin.get()
            }
        }
    }
}


def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL']
            .any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
